{"name":"Rzwebsys7","tagline":"CMS powered by Yii2","body":"# RzWebSys7 - CMS на основе Yii2\r\n\r\nПредствляет собой платформу для быстрого развертывания интерент проекта. Содержит набор наиболее востребованных модулей.\r\n\r\n## Структура системы\r\n\r\n1) app - web приложение\r\n\r\n2) console - консольное приложение\r\n\r\n3) common - ядро системы\r\n\r\n4) vendor - сторонние компоненты\r\n\r\n5) environments - настройки окружений\r\n\r\n##Системные требования\r\n\r\n1) PHP 5.4\r\n\r\n2) Веб сервер Apache 2.2\r\n\r\n3) PostgreSql 9.3\r\n\r\n4) Composer\r\n\r\n##Установка\r\n\r\nПредполагается что composer находится в путях поиска вашей командной оболочки. Например, его можно разместить в **/usr/local/bin**\r\n\r\nApache настроен таким образом, что DOCUMENT_ROOT для виртуального хоста указывает на папку **app/web** \r\n\r\nДля начала неоходимо установть плагин **fxp/composer-asset-plugin:1.0.0** для composer. Для этого выполняем следующую комаду:\r\n\r\n`composer.phar global require \"fxp/composer-asset-plugin:1.0.0\"`\r\n\r\nПосле этого можно приступит к установки самой системы:\r\n\r\n1) В файлах environments/dev/common/config/main-local.php и environments/prod/common/config/main-local.php\r\nпрописываем настройки соединения с базой данных для окружения разработки и продакшена соответственно.\r\n\r\n2) Устанавливаем зависимости через composer. В корне системы выполняем команду `composer.phar install`\r\n\r\n3) Запускаем скрипт **./init** и выбираем нужное окружение для установки\r\n\r\n4) Запускаем **./yii install**\r\n\r\n5) Наслаждаемся )\r\n\r\nАдминистративный раздел находится по адресу **/admin/**. Для входа используйте пароль пользователя **root** указанный при установке. \r\n\r\n## Модули входящие в состав системы\r\n\r\n### Главный модуль\r\n\r\nПредоставляет следующий функционал:\r\n\r\n1.  Текстовые странички с возможностью создание иерархических структур и управлением мета - тегами. Возможность создания дружественных SEO url - адресов произвольной вложенности.\r\nНапример: **/articles/php/yii2/**\r\n\r\n2.  Меню. Возможность создания любого количества меню, произвольной вложенности.\r\n\r\n3.  Комментарии. Возможность добавления комментариев к любой сущности системы.\r\n\r\n4.  Включаемые области. Текстовые включаемые области с возможностью подключения php сценариев.\r\n\r\n5.  Группы включаемых областей. Объединение включаемых областей в группы с возможностью задания правил отображения на страницах сайта.\r\n\r\n6.  Управление пользователями и правами доступа к сущностям. Возможность разграничить доступ к сущностям в админке для разных групп пользователей.\r\n\r\n7.  Управление подключением шаблонов сайта в зависимости от условий (по url адресу, php выражению и т.п.)\r\n\r\n8.  Генератор карты сайта в html и xml форматах.\r\n\r\n9.  Форма обратной связи с отправкой сообщений на email. \r\n\r\n### Модуль новостей\r\n\r\nСоздание новостных и статейных разделов. Иерархический рубрикатор записей.\r\n\r\n### Баннерный модуль\r\n\r\nДобавление баннеров и их вывод в зависимости от баннерного места. Поддерживаются следующие форматы: jpg, gif, png, swf.\r\n\r\n### Каталог\r\n\r\nКаталог товаров с иерархической рубрикацией. Возможность интеграции с модулем магазина.\r\n\r\n### Модуль магазина.\r\n\r\nКомпоненты корзины реализованы с помощью ajax и работают без перезагрузки страницы. Возможность создания вариантов доставки и оплаты, настройка статусов заказа. Содержимое заказа сохраняется в админке,\r\nа также отправляется администратору сайта на email.\r\n\r\n### Гео модуль\r\n\r\nСодержит данные и компоненты для организации гео - справочника.\r\n\r\n### Фотогалерея\r\n\r\nСоздание фотогалерей с загрузкой файлов через HTML 5\r\n\r\n### Модуль импорта\r\n\r\nПозволяет ипортировать данные из CSV файлы. Есть возможность ручной настройки сопоставления полей файла и импортируемых моделей.\r\n\r\n## Создание модулей\r\n\r\n### Генерация каркаса нового модуля\r\n\r\nОсуществляется с помощью системного генератора **App module generator**\r\n\r\n### Подключение модуля к системе\r\n\r\nДля покдлючения модуля к системе необходимо прописать идентификатор модуля в параметре **enabledModules** в файле:\r\n\r\n```\r\ncommon/config/params.php\r\n```\r\n\r\n### Создание таблиц сущностей новых модулей.\r\n\r\nОсуществляется с помощью **миграций**. Миграции создаются на базе системных шаблонов.\r\n\r\nПримеры (таблица простой сущности, таблица древовидной сущности):\r\n\r\n```\r\n./yii migrate/create --migrationPath=@webapp/modules/module_name/migrations --templateFile=@console/views/migrations/table.php migration_name\r\n```\r\n\r\n```\r\n./yii migrate/create --migrationPath=@webapp/modules/module_name/migrations --templateFile=@console/views/migrations/table-tree.php migration_name\r\n```\r\n\r\nгде **module_name** - имя модуля для которого создается миграция, **migration_name** - имя миграции\r\n\r\nПример применения миграций для конкретного модуля:\r\n\r\n```\r\n./yii migrate/up --applyPath=@webapp/modules/module_name/migrations\r\n```\r\n\r\nБез параметра **applyPath** применение миграций происходит для всех модулей сразу\r\n\r\n### Создание моделей\r\n\r\nМодели системы должны быть унаследованы от **\\common\\db\\ActiveRecord** или **\\common\\db\\TActiveRecord**\r\n(обычные и древовидные соответственно).\r\n\r\nДля каждой модели должен быть создан класс, унаследованный от **\\common\\db\\MetaFields**. В нем должен быть реализован метод возвращающий конфигурацию объектов полей модели.\r\nПоле модели - дополнительная абстракция над атрибутом модели. Класс поля должен быть унаследован от **\\common\\db\\fields\\Field**. Данная абстракция необходима для автоматической\r\nгенерации интерфейса администрирования.\r\n\r\nПримеры кода можно найти в модуле main.\r\n\r\n### Генерация CRUD сущностей\r\n\r\nОсуществляется с помощью модуля Gii на основе системных шаблонов. Шаблоны **App CRUD** и **App tree CRUD**\r\nдля обычных и древовидных сущностей соответственно.\r\nБазовый класс для контроллеров админки common\\controllers\\Admin.\r\n\r\n## Рекомендации\r\n\r\nМодули ресурсов (AssetBundle) необходимо наследовать от **\\common\\components\\AssetBundle**\r\n\r\n## Генерация документации\r\n\r\nДля генерации документации воспользуйтесь следующими командами\r\n\r\n```\r\nvendor/bin/apidoc api app ./docs/app\r\n```\r\n\r\n```\r\nvendor/bin/apidoc api common ./docs/common\r\n```\r\n\r\n```\r\nvendor/bin/apidoc api console ./docs/console\r\n```\r\n\r\nТестирование\r\n------------\r\n\r\nПример генерации фикстур сущностей по шаблону:\r\n\r\n```\r\n./yii fixture/generate-all --templatePath='@tests/codeception/common/templates/fixtures' --fixtureDataPath='@tests/codeception/common/fixtures/data'\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}